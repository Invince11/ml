{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/diarization-bad","result":{"data":{"post":{"__typename":"MdxPost","slug":"/diarization-bad","title":"Diarization & BAD","date":"21.07.2020","tags":[],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Diarization & BAD\",\n  \"date\": \"2020-07-21T00:00:00.000Z\",\n  \"tags\": [],\n  \"author\": \"anirudhdagar\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Diarization\"), mdx(\"p\", null, \"Automatic speaker diarization is the process of recognizing \\u201Cwho spoke when.\\u201D It enriches understanding from automatic speech recognition, which is valuable for downstream applications such as analytics for call-center transcription and meeting transcription.\"), mdx(\"p\", null, \"In most real-world scenarios speech does not come in well defined audio segments with only one speaker. In most of the conversations that our algorithms will need to work with, people will interrupt each other and cutting the audio between sentences won\\u2019t be a trivial task.\\nIn addition to that, in many applications we will want to identify multiple speakers in a conversation, for example when writing a protocol of a meeting. For such occasions, identifying the different speakers and connect different sentences under the same speaker is a critical task.\\nSpeaker Diarization is the solution for those problems. With this process we can divide an input audio into segments according to the speaker\\u2019s identity. It can be described as the question \\u201Cwho spoke when?\\u201D in an audio segment.\"), mdx(\"p\", null, \"With the rise of voice biometrics and speech recognition systems, the ability to process audio of multiple speakers is crucial. This article is a basic tutorial for that process with Kaldi X-Vectors, a state-of-the-art technique.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"- Diarization\\n    - Resemblyzer + D-Vector\\n        - Soft Clustering?\\n    - DER (Metrics)\\n    - PyAnnote, librosa\\n    - Smoothing\\n    - Resegmentation\\n- UIS-RNN\\n    - Converting data to UIS Style format.\\n    - Realizing the limited amount of tagged data for UIS-RNN\\n- Simulated Data Generation\\n    - Overlap\\n    - Gap\\n    - Dual Audios -> Mono Audios\\n    - VAD\\n        - Agrressive\\n        - Mild\\n    - Our architecture\\n    - Simulated Audio Examples\\n\")), mdx(\"h1\", null, \"BAD (Bad Audio Detector)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"    - log-mel (Mel Spectrograms)\\n    - CNNs as feature extractor on top of this\\n    - Audio Pipeline\\n    - Why not use CNN directly on Audio File?\\n    - Label Description\\n    - Class Distribution\\n    - Metrics Accuracy Precision\\n    - What we are really focussing on?\\n    - On the fly preprocessing of audios to log-mels\\n    - What is Chunking? Why is it important?\\n\")), mdx(\"p\", null, \"All work No FUN????\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"- [ ] Read more about this on my blog here ->\\n        - [ ] Open House\\n        - [ ] Paper Reading\\n        - [ ] Hackathon\\n        - [ ] WAYWO\\n        - [ ] 1:1 (Life talk! Deep Talk!)\\n        - [ ] Friday Talks\\n- [ ] What all I learnt?\\n    - [ ] Writing better clean code\\n    - [ ] Dependecy management\\n    - [ ] AWS Management\\n\")), mdx(\"p\", null, \"At Vernacular.ai we work on a lot of interesting problems in speech tech. Many\\nof these have potential to come out in the form of articles which might be\\ninteresting and valuable for other people working in the field. With this blog\\nwe are trying to experiment in that direction by committing to a more active\\ninvolvement with the community.\"), mdx(\"p\", null, \"A post here will mostly be of one of the following, non-exhaustive, kinds:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Journeys of systems, processes and people in the team.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Introductions to a new/old problem, tutorials etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deeper posts, insightful explanations, research findings etc.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Opinion pieces on the technologies we work with.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Notes on processes that we follow internally.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"News, releases etc.\")), mdx(\"p\", null, \"Many of these might be syndicated, with original posts on authors' personal\\npages. We are also trying to set up a peer review protocol to help us decide\\nwhat qualifies to be published here along with a rough minimum frequency of\\nposts.\"), mdx(\"p\", null, \"Stay tuned to our \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://vernacular-ai.github.io/ml/rss.xml\"\n  }), \"rss feed\"), \" for\\nupdates.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Diarization Automatic speaker diarization is the process of recognizing “who spoke when.” It enriches understanding from automatic speech…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/diarization-bad","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}